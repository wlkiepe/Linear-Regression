# -*- coding: utf-8 -*-
"""Copy of Day77_LinearRegression

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11DwNl2WoIQqfVcZhB2jjHODnHCmvvyW-
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression

revenue = pd.read_csv('cost_revenue_dirty.csv')
revenue.info()

revenue['USD_Domestic_Gross'].replace('$','')
revenue.head()

chars_to_remove = [',', '$']
columns_to_clean = ['USD_Production_Budget', 
                    'USD_Worldwide_Gross',
                    'USD_Domestic_Gross']
 
for col in columns_to_clean:
    for char in chars_to_remove:
        # Replace each character with an empty string
        revenue[col] = revenue[col].astype(str).str.replace(char, "")
    # Convert column to a numeric data type
    revenue[col] = pd.to_numeric(revenue[col])

revenue.head()

revenue.Release_Date = pd.to_datetime(revenue.Release_Date)

revenue.info()

revenue.describe()

revenue[revenue.USD_Domestic_Gross == 0].sort_values('USD_Production_Budget', ascending=False)

revenue[revenue.USD_Worldwide_Gross == 0].sort_values('USD_Production_Budget', ascending=False)

international_releases = revenue.loc[(revenue.USD_Domestic_Gross == 0) & 
                                  (revenue.USD_Worldwide_Gross != 0)]
international_releases.head()

revenue.query('USD_Worldwide_Gross != 0 and USD_Domestic_Gross == 0').head()

revenue.sort_values('Release_Date', ascending=False).head(15)

scrape_date = pd.Timestamp('2018-5-1')
future_releases = revenue[revenue.Release_Date >= scrape_date]
data_clean = revenue.drop(future_releases.index)
data_clean.sort_values('Release_Date', ascending=False).head()

data_clean.query('USD_Worldwide_Gross < USD_Production_Budget')

plt.figure(figsize=(8,4), dpi=200)
sns.scatterplot(data=data_clean,
                x='USD_Production_Budget',
                y='USD_Worldwide_Gross')
plt.show()

ax = sns.scatterplot(data=data_clean,
                     x='USD_Production_Budget', 
                     y='USD_Worldwide_Gross')
 
ax.set(ylim=(0, 3000000000),
       xlim=(0, 450000000),
       ylabel='Revenue in $ billions',
       xlabel='Budget in $100 millions')

plt.figure(figsize=(8,4), dpi=200)
ax = sns.scatterplot(data=data_clean,
                     x='USD_Production_Budget', 
                     y='USD_Worldwide_Gross',
                     hue='USD_Worldwide_Gross', # colour
                     size='USD_Worldwide_Gross',) # dot size
 
ax.set(ylim=(0, 3000000000),
       xlim=(0, 450000000),
       ylabel='Revenue in $ billions',
       xlabel='Budget in $100 millions',)
 
plt.show()

plt.figure(figsize=(8,4), dpi=200)
 
# set styling on a single chart
with sns.axes_style('darkgrid'):
  ax = sns.scatterplot(data=data_clean,
                       x='USD_Production_Budget', 
                       y='USD_Worldwide_Gross',
                       hue='USD_Worldwide_Gross',
                       size='USD_Worldwide_Gross')
 
  ax.set(ylim=(0, 3000000000),
        xlim=(0, 450000000),
        ylabel='Revenue in $ billions',
        xlabel='Budget in $100 millions')

plt.figure(figsize=(8,4), dpi=200)
 
# set styling on a single chart
with sns.axes_style('darkgrid'):
  ax = sns.scatterplot(data=data_clean,
                       x='Release_Date', 
                       y='USD_Production_Budget',
                       hue='USD_Worldwide_Gross',
                       size='USD_Worldwide_Gross')
 
  ax.set(ylabel='Budget in $100 millions',
        xlabel='Year')

dt_index = pd.DatetimeIndex(data_clean.Release_Date)
years = dt_index.year
decades = years//10*10
data_clean['Decade'] = decades

data_clean

shift_date = pd.Timestamp('1970-1-1')
new_films_list = data_clean[data_clean.Release_Date >= shift_date]
old_films = data_clean.drop(new_films_list.index)
old_films.sort_values('Release_Date', ascending=False).head()
old_films_list = data_clean[data_clean.Release_Date <= shift_date]
new_films = data_clean.drop(old_films_list.index)
new_films.sort_values('Release_Date', ascending=True).head()

old_films.shape

new_films.shape

sns.regplot(data=old_films, 
            x='USD_Production_Budget',
            y='USD_Worldwide_Gross')

plt.figure(figsize=(8,4), dpi=200)
with sns.axes_style("whitegrid"):
  sns.regplot(data=old_films, 
            x='USD_Production_Budget', 
            y='USD_Worldwide_Gross',
            scatter_kws = {'alpha': 0.4})

plt.figure(figsize=(8,4), dpi=200)
with sns.axes_style("darkgrid"):
    graph = sns.regplot(data=new_films, 
            x='USD_Production_Budget',
            y='USD_Worldwide_Gross',
            
            line_kws = {'color': '#ff7c43'})
    graph.set(xlim=(0,450000000),
              ylim=(0,3000000000),
              xlabel='Budget in $ millions',
              ylabel='Revenue in $ Billions',
            )

regression = LinearRegression()

# Independent Variable(s) or Feature(s)
X = pd.DataFrame(new_films, columns=['USD_Production_Budget'])
 
# Dependent Variable or Target
y = pd.DataFrame(new_films, columns=['USD_Worldwide_Gross']) 

# Find the best-fit line
regression.fit(X, y)
regression.intercept_

regression.coef_

# R-squared
regression.score(X, y)

# Independent Variable(s) or Feature(s)
A = pd.DataFrame(old_films, columns=['USD_Production_Budget'])
 
# Dependent Variable or Target
b = pd.DataFrame(old_films, columns=['USD_Worldwide_Gross']) 
regression.fit(A,b)
regression.intercept_

regression.coef_

regression.score(A,b)

regression.fit(X,y)

regression.predict()

